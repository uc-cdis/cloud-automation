###################### Required ######################
## General variables
# VPC name is also used in DB name, so only alphanumeric characters.
vpc_name="$GEN3_WORKSPACE" 
# The CIDR range for the commons, currently we only support /20 for the main CIDR range.
vpc_cidr_block="172.X.Y.0/20"
# The account id of account that owns the ami's being used.
ami_account_id="099720109477" 
# Bucket with useryaml files.
users_bucket_name="cdis-gen3-users" 
# The location of the useryaml. Should match the directory in the user bucket. 
config_folder="PUT-SOMETHING-HERE" 
## Non-ha squid variables
## HA squid is legacy so it is recommended to use HA squid instead.
## These variables are in place for legacy setups.
## Can also set if cost is an issue, as it will cut down on a few dollars a month running one less smaller squid instance.
# Instance size of non ha squid.
single_squid_instance_type="t2.micro" 
# deploy the single squid, in place so you can do a ha squid migration and have both squid in place at same time for blue green type swap.
deploy_single_proxy=false
## Ha squid variables
# Whether to deploy HA squid or single instance squid.
deploy_ha_squid=true
# HA squid instance configuration.
ha-squid_instance_type="t3.medium" 
ha-squid_instance_drive_size=8 
# HA squid autoscaling group configuration.
ha-squid_cluster_desired_capasity= 2 
ha-squid_cluster_min_size=1 
ha-squid_cluster_max_size=3 
# The search criteria terrafrom will use to find an ami for squid.
# Currently we have only tested Ubuntu and AL2 OS's.
squid_image_search_criteria="ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*" 
# The bootstrap script of ha squid.
ha-squid_bootstrap_script="squid_running_on_docker.sh" 
# Additional variables to pass along with the bootstrapscript.
ha-squid_extra_vars=["squid_image=master"] 
## RDS instance variables
# Whether to deploy specific rds instances.
# Each RDS instance is needed to run a full commons. Only modify if necessary.
deploy_sheepdog_db=true 
deploy_fence_db=true 
deploy_indexd_db=true 
# The size of the disk for the various rds instances.
fence_db_size    = 10 
sheepdog_db_size = 10 
indexd_db_size   = 10 
# The rds instance sizes.
fence_db_instance    = "db.t3.small" 
sheepdog_db_instance = "db.t3.small" 
indexd_db_instance   = "db.t3.small" 
# RDS engine versions
# Try not to put minor versions, ie 13.3, as it can cause issues with the parameter group creation.
fence_engine_version="13" 
sheepdog_engine_version="13" 
indexd_engine_version="13" 
# Engine of rds instances. 
# We currently only support postgres.
# CHANGE AT YOUR OWN RISK.
sheepdog_engine="postgres" 
fence_engine="postgres" 
indexd_engine="postgres" 
# The default db names and master usernames of the rds instances. 
fence_database_name="fence" 
sheepdog_database_name="gdcapi" 
indexd_database_name="indexd" 
fence_db_username="fence_user" 
sheepdog_db_username="sheepdog" 
indexd_db_username="indexd_user" 
# Whether to allow major version upgrades or not.
fence_allow_major_version_upgrade="true" 
sheepdog_allow_major_version_upgrade="true" 
indexd_allow_major_version_upgrade="true" 
# Whether to allow auto minor version upgrades or not.
# This is recommended to stay up to date without manual intervention.
fence_auto_minor_version_upgrade="true" 
indexd_auto_minor_version_upgrade="true" 
sheepdog_auto_minor_version_upgrade="true" 
# These correspond to snapshot names that you can use to create your instance with.
# Use in case you want to start you rds instances from snapshots.
fence_snapshot="" 
gdcapi_snapshot="" 
indexd_snapshot="" 
# Maintenance times for rds instances.
fence_maintenance_window="SAT:09:00-SAT:09:59" 
sheepdog_maintenance_window="SAT:10:00-SAT:10:59" 
indexd_maintenance_window="SAT:11:00-SAT:11:59" 
# The snapshot window for the rds instances.
fence_backup_window="06:00-06:59" 
sheepdog_backup_window="07:00-07:59" 
indexd_backup_window="08:00-08:59" 
# How long snapshots are stored, in days.
fence_backup_retention_period="4" 
sheepdog_backup_retention_period="4" 
indexd_backup_retention_period="4" 
# These passwords are autogenerated random passwords. It's best practice to use these, as they should be secure.
# don't use ( ) " ' { } < > @ in password.
# These also populate credential files, so if you need to update, ensure you update the files accordingly. 
# Check https://github.com/uc-cdis/cloud-automation/tree/master/tf_files/shared/modules/k8s_configs.
db_password_fence="$(random_alphanumeric 32)" 
db_password_sheepdog="$db_password_sheepdog" 
db_password_peregrine="$(random_alphanumeric 32)" 
db_password_indexd="$(random_alphanumeric 32)" 
# This is for legacy commons, but still populates the credential files.
db_password_gdcapi="$db_password_sheepdog" 
### Require for CSOC setup. 
## CSOC is the Commons Services Operations Center and is a master account that should be setup before your commons. It is optional.
# The account ID of the CSOC.
csoc_account_id="433568766270" 
# The CIDR range of the CSOC account, only needed for CSOC setup.
peering_cidr="10.128.0.0/20" 
# The vpc of the CSOC
peering_vpc_id="vpc-e2b51d99" 
# Whether the commons has a CSOC or not.
csoc_manage=false 
### Variables that be used to populate template files that can be updated later.
## Specific files are not listed but can mostly be found here https://github.com/uc-cdis/cloud-automation/tree/master/tf_files/shared/modules/k8s_configs.
# The region your aws account is in.
# Currently we have only fully tested support for us-east-1.
# Choose other region than us-east-1 at your own risk and reach out for regional issues we can help fix.
# Should also ensure, your aws profile is configred for the same region to prevent cross regional issues down the line.
aws_region="$(aws configure get region)" 
# The arn of the cert created in ACM. 
# Should be setup to match the hostname of the commons.
aws_cert_name="arn:aws:acm:REGION:ACCOUNT-NUMBER:certificate/CERT-ID" 
# The hostname of your commons. 
hostname="YOUR.API.HOSTNAME" 
# String of ssh keys to add to commons.
kube_ssh_key="${kube_ssh_key}" 
# This indexd guid prefix.
# Reach out to us to provide a unique prefix, in case you want to interoperate with our systems.
# Should be in the style "dg.XXXX/".
# WARNING, ensure you include the trailing "/".
indexd_prefix="dg.XXXX/" 
# The client_id/secret of your google client, for oath login. 
google_client_secret="YOUR.GOOGLE.SECRET" 
google_client_id="YOUR.GOOGLE.CLIENT" 
# Alphanumeric characters used for encryption or db connections.  
hmac_encryption_key="$(random_alphanumeric 32 | base64)" 
gdcapi_secret_key="$(random_alphanumeric 50)" 
gdcapi_indexd_password="$(random_alphanumeric 32)" 
# Used for mailgun configuration.
# Mostly a legacy configuration we do not use anymore.
mailgun_api_key="" 
mailgun_smtp_host="" 
mailgun_api_url="" 
###################### Optional ######################
# Used to set a secondary CIDR range for workflow nodes.
secondary_cidr_block="" 
# Used to setup vpc flow logs, beware can be expensive.
vpc_flow_logs=false 
vpc_flow_traffic="ALL"
# The organization name that will be used on tags for AWS resources.
organization_name="Basic Service"
# Slack webhooks for alarms.
slack_webhook="" 
secondary_slack_webhook=""
# The percentage disk space used before alarms.
alarm_threshold="85" 
# Whether to have highly available rds instances, aka multi AZ.
fence_ha=false 
sheepdog_ha=false 
indexd_ha=false 
# Let k8s workers be on a /22 subnet per AZ.
# Recommended to use, as it can prevent IP exhaustion for larger commons.
network_expansion=false 
# Whether to encrypt rds storage.
rds_instance_storage_encrypted=true 
# Maximum allocated storage for autosacaling. 0 disables storage autoscaling. 
# Otherwise set a value higer than the <service>_db_size variable to set the max size storage will scale to.
fence_max_allocated_storage=0 
sheepdog_max_allocated_storage=0 
indexd_max_allocated_storage=0 
# Used for qualys activation. This is optional.
activation_id="" 
customer_id="" 
# Whether to use FIPs enabled ami's.
# We own the ami's so this is more of an internal CDIS variable at the moment.
fips=false 
# The branch that will be set in the squid instances to determine which branch cloud-automation pulls from.
# For testing purposes, when something other than the master is need to be tested.
branch="master" 
# When fence bot has to access another bucket that wasn't created by the VPC module.
fence-bot_bucket_access_arns=[] 
## Legacy configuration, only used for legacy setups, new deployments can most likely ignore.
# Configuration for gdcapi oauth client.
gdcapi_oauth2_client_id="" 
gdcapi_oauth2_client_secret="" 