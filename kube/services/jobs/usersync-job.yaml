#
# run with:
# gen3 job run usersync
#
# Optional Arguments:
#     FORCE Force running full userync without doing diff of user.yaml
#           default: false
#           ex: gen3 job run usersync FORCE true
#
#     ADD_DBGAP Force attempting a dbgap sync if "true", falls back to manifest configuration
#               by defualt. i.e. this isn't required for a dbGaP sync to happen
#               default: "false" - fall back to manifest configuration
#               ex: gen3 job run usersync ADD_DBGAP true
#
#     ONLY_DBGAP Forces ONLY a dbgap sync if "true", IGNORING user.yaml
#                default: "false"
#                ex: gen3 job run usersync ONLY_DBGAP true
#
# Examples
# gen3 job run usersync
# gen3 job run usersync FORCE true
# gen3 job run usersync ADD_DBGAP true
# gen3 job run usersync ONLY_DBGAP true
#
apiVersion: batch/v1
kind: Job
metadata:
  name: usersync
spec:
  # not yet supported - backOffLimit: 3
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      serviceAccountName: useryaml-job
      volumes:
        - name: yaml-merge
          configMap:
            name: "fence-yaml-merge"
        - name: shared-data
          emptyDir: {}
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
        - name: old-config-volume
          secret:
            secretName: "fence-secret"
        - name: json-secret-volume
          secret:
            secretName: "fence-json-secret"
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
# -----------------------------------------------------------------------------
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: "fence-google-app-creds-secret"
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: "fence-google-storage-creds-secret"
        - name: fence-yaml
          configMap:
            name: fence
        - name: fence-ssh-keys
          secret:
            secretName: "fence-ssh-keys"
            defaultMode: 0400
        - name: fence-sshconfig
          configMap:
            name: "fence-sshconfig"
        - name: projects
          configMap:
            name: "projects"
      containers:
      - name: fence
        GEN3_FENCE_IMAGE
        imagePullPolicy: Always
        env:
          - name: PYTHONPATH
            value: /var/www/fence
          - name: SYNC_FROM_DBGAP
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: sync_from_dbgap
          - name: FORCE
            GEN3_FORCE|-value: "false"-|
          - name: ADD_DBGAP
            GEN3_ADD_DBGAP|-value: "false"-|
          - name: ONLY_DBGAP
            GEN3_ONLY_DBGAP|-value: "false"-|
          - name: FENCE_PUBLIC_CONFIG
            valueFrom:
              configMapKeyRef:
                name: manifest-fence
                key: fence-config-public.yaml
                optional: true
        volumeMounts:
          - name: shared-data
            mountPath: /mnt/shared
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
          - name: "old-config-volume"
            readOnly: true
            mountPath: "/var/www/fence/local_settings.py"
            subPath: local_settings.py
          - name: "json-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_credentials.json"
            subPath: fence_credentials.json
          - name: "creds-volume"
            readOnly: true
            mountPath: "/var/www/fence/creds.json"
            subPath: creds.json
          - name: "config-helper"
            readOnly: true
            mountPath: "/var/www/fence/config_helper.py"
            subPath: config_helper.py
# -----------------------------------------------------------------------------
          - name: "config-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence-config-secret.yaml"
            subPath: fence-config.yaml
          - name: "yaml-merge"
            readOnly: true
            mountPath: "/var/www/fence/yaml_merge.py"
            subPath: yaml_merge.py
          - name: "fence-google-app-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
            subPath: fence_google_app_creds_secret.json
          - name: "fence-google-storage-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
            subPath: fence_google_storage_creds_secret.json
          - name: "fence-yaml"
            mountPath: "/var/www/fence/user.yaml"
            subPath: user.yaml
          - name: "fence-ssh-keys"
            mountPath: "/root/.ssh/id_rsa"
            subPath: "id_rsa"
          - name: "fence-ssh-keys"
            mountPath: "/root/.ssh/id_rsa.pub"
            subPath: "id_rsa.pub"
          - name: "fence-sshconfig"
            mountPath: "/root/.ssh/config"
            subPath: "config"
          - name: "projects"
            mountPath: "/var/www/fence/projects.yaml"
            subPath: "projects.yaml"
        command: ["/bin/bash" ]
        args:
          - "-c"
          # Script always succeeds if it runs (echo exits with 0)
          - |
            echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
            python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
            let count=0
            while [[ ! -f /mnt/shared/user.yaml && $count -lt 50 ]]; do
              echo "fence container waiting for /mnt/shared/user.yaml";
              sleep 2
              let count=$count+1
            done

            if [[ "$ONLY_DBGAP" == "true" ]]; then
              echo "ONLY_DBGAP arg provided... forcing a sync from dbGaP and IGNORING user.yaml"
              fence-create sync --arborist http://arborist-service --sync_from_dbgap True --projects /var/www/fence/projects.yaml
            elif [ ! "$SYNC_FROM_DBGAP" = True ]; then
              if [[ -f /mnt/shared/user.yaml ]]; then
                # if manifest said not to sync from dbgap, there's a user.yaml, and
                # ADD_DBGAP arg was provided, we should force a sync using dbgap AND the user.yaml
                if [[ "$ADD_DBGAP" == "true" ]]; then
                  echo "ADD_DBGAP arg provided... forcing a sync from both dbGaP AND user.yaml"
                  fence-create sync --arborist http://arborist-service --sync_from_dbgap True --projects /var/www/fence/projects.yaml --yaml /mnt/shared/user.yaml
                elif [[ "$FORCE" == "true" ]]; then
                  echo "FORCE arg provided... ignoring user.yaml diff and forcing a usersync anyway"
                  fence-create sync --arborist http://arborist-service --yaml /mnt/shared/user.yaml
                else
                  echo "fence container user.yaml diff ..."
                  diff /var/www/fence/user.yaml /mnt/shared/user.yaml
                  if [[ $? == 1 || "${userYamlS3Path}" = 'none' ]]; then
                    echo "running fence-create"
                    fence-create sync --arborist http://arborist-service --yaml /mnt/shared/user.yaml
                  else
                    echo "no difference found"
                  fi
                fi
              else
                # if manifest said not to sync from dbgap, there's NOT a user.yaml, and
                # ADD_DBGAP arg was provided, we should at least force a sync using dbgap
                if [[ "$ADD_DBGAP" == "true" ]]; then
                  echo "ADD_DBGAP arg provided... forcing a sync from dbGaP"
                  fence-create sync --arborist http://arborist-service --sync_from_dbgap True --projects /var/www/fence/projects.yaml
                fi
                echo "/mnt/shared/user.yaml did not appear within timeout :-("
              fi
            else
              # manifest says to sync from dbgap, so check if there's also a user.yaml to sync
              if [[ -f /mnt/shared/user.yaml ]]; then
                fence-create sync --arborist http://arborist-service --sync_from_dbgap $(SYNC_FROM_DBGAP) --projects /var/www/fence/projects.yaml --yaml /mnt/shared/user.yaml
              else
                fence-create sync --arborist http://arborist-service --sync_from_dbgap $(SYNC_FROM_DBGAP) --projects /var/www/fence/projects.yaml
              fi
            fi
            echo "Exit code: $?"

      - name: awshelper
        image: quay.io/cdis/awshelper:master
        imagePullPolicy: Always
        volumeMounts:
          - name: "fence-yaml"
            mountPath: "/var/www/fence/user.yaml"
            subPath: user.yaml
          - name: shared-data
            mountPath: /mnt/shared
        command: ["/bin/bash" ]
        args:
          - "-c"
          - |
            if [ "${userYamlS3Path}" = 'none' ]; then
              echo "s3 yaml not provided, using local yaml"
              cp /var/www/fence/user.yaml /mnt/shared/user.yaml
            else
              echo "awshelper downloading ${userYamlS3Path} to /mnt/shared/useryaml";
              aws s3 cp "${userYamlS3Path}" /mnt/shared/user.yaml
              count=0
              sleepTime=10
              while [[ $count -lt 3 && ! -f /mnt/shared/user.yaml ]]; do
                let count=$count+1
                echo "Download failed - retry in $sleepTime seconds"
                let sleepTime=$sleepTime+$sleepTime
                aws s3 cp "${userYamlS3Path}" /mnt/shared/user.yaml
              done
              if [[ -f /mnt/shared/user.yaml ]]; then
                if [[ "$FORCE" == "true" ]]; then
                  echo "awshelper updating fence configmap"
                  kubectl delete configmap fence
                  kubectl create configmap fence --from-file=/mnt/shared/user.yaml
                  if [ "${slackWebHook}" != 'None' ]; then
                    curl -X POST --data-urlencode "payload={\"text\": \"AWSHelper: Syncing users on ${gen3Env}\"}" "${slackWebHook}"
                  fi
                else
                  echo "awshelper container user.yaml diff ..."
                  diff /var/www/fence/user.yaml /mnt/shared/user.yaml
                  if [[ $? == 1 ]]; then
                    echo "awshelper updating fence configmap"
                    kubectl delete configmap fence
                    kubectl create configmap fence --from-file=/mnt/shared/user.yaml
                    if [ "${slackWebHook}" != 'None' ]; then
                      curl -X POST --data-urlencode "payload={\"text\": \"AWSHelper: Syncing users on ${gen3Env}\"}" "${slackWebHook}"
                    fi
                  else
                    echo "no difference found"
                  fi
                fi
              fi
            fi
        env:
          - name: userYamlS3Path
            valueFrom:
                configMapKeyRef:
                  name: manifest-global
                  key: useryaml_s3path
          - name: gen3Env
            valueFrom:
              configMapKeyRef:
                name: global
                key: environment
          - name: slackWebHook
            valueFrom:
              configMapKeyRef:
                name: global
                key: slack_webhook
      restartPolicy: Never
