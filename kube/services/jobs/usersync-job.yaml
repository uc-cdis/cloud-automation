#
# run with:
# gen3 job run usersync
#
# Optional Arguments:
#     ADD_DBGAP Force attempting a dbgap sync if "true", falls back to manifest configuration
#               by defualt. i.e. this isn't required for a dbGaP sync to happen
#               default: "false" - fall back to manifest configuration
#               ex: gen3 job run usersync ADD_DBGAP true
#
#     ONLY_DBGAP Forces ONLY a dbgap sync if "true", IGNORING user.yaml
#                default: "false"
#                ex: gen3 job run usersync ONLY_DBGAP true
#
# Examples
# gen3 job run usersync
# gen3 job run usersync FORCE true
# gen3 job run usersync ADD_DBGAP true
# gen3 job run usersync ONLY_DBGAP true
#
apiVersion: batch/v1
kind: Job
metadata:
  name: usersync
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      serviceAccountName: useryaml-job
      volumes:
        - name: yaml-merge
          configMap:
            name: "fence-yaml-merge"
        - name: shared-data
          emptyDir: {}
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
        - name: old-config-volume
          secret:
            secretName: "fence-secret"
        - name: json-secret-volume
          secret:
            secretName: "fence-json-secret"
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
# -----------------------------------------------------------------------------
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: "fence-google-app-creds-secret"
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: "fence-google-storage-creds-secret"
        - name: fence-ssh-keys
          secret:
            secretName: "fence-ssh-keys"
            defaultMode: 0400
        - name: fence-sshconfig
          configMap:
            name: "fence-sshconfig"
        - name: projects
          configMap:
            name: "projects"
      containers:
      - name: fence
        GEN3_FENCE_IMAGE
        imagePullPolicy: Always
        env:
          - name: PYTHONPATH
            value: /var/www/fence
          - name: SYNC_FROM_DBGAP
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: sync_from_dbgap
          - name: ADD_DBGAP
            GEN3_ADD_DBGAP|-value: "false"-|
          - name: ONLY_DBGAP
            GEN3_ONLY_DBGAP|-value: "false"-|
          - name: SLACK_SEND_DBGAP
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: slack_send_dbgap
                optional: true
          - name: slackWebHook
            valueFrom:
                configMapKeyRef:
                  name: global
                  key: slack_webhook
                  optional: true
          - name: gen3Env
            valueFrom:
                configMapKeyRef:
                  name: global
                  key: environment
          - name: FENCE_PUBLIC_CONFIG
            valueFrom:
              configMapKeyRef:
                name: manifest-fence
                key: fence-config-public.yaml
                optional: true
        volumeMounts:
          - name: shared-data
            mountPath: /mnt/shared
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
          - name: "old-config-volume"
            readOnly: true
            mountPath: "/var/www/fence/local_settings.py"
            subPath: local_settings.py
          - name: "json-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_credentials.json"
            subPath: fence_credentials.json
          - name: "creds-volume"
            readOnly: true
            mountPath: "/var/www/fence/creds.json"
            subPath: creds.json
          - name: "config-helper"
            readOnly: true
            mountPath: "/var/www/fence/config_helper.py"
            subPath: config_helper.py
# -----------------------------------------------------------------------------
          - name: "config-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence-config-secret.yaml"
            subPath: fence-config.yaml
          - name: "yaml-merge"
            readOnly: true
            mountPath: "/var/www/fence/yaml_merge.py"
            subPath: yaml_merge.py
          - name: "fence-google-app-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
            subPath: fence_google_app_creds_secret.json
          - name: "fence-google-storage-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
            subPath: fence_google_storage_creds_secret.json
          - name: "fence-ssh-keys"
            mountPath: "/root/.ssh/id_rsa"
            subPath: "id_rsa"
          - name: "fence-ssh-keys"
            mountPath: "/root/.ssh/id_rsa.pub"
            subPath: "id_rsa.pub"
          - name: "fence-sshconfig"
            mountPath: "/root/.ssh/config"
            subPath: "config"
          - name: "projects"
            mountPath: "/var/www/fence/projects.yaml"
            subPath: "projects.yaml"
        command: ["/bin/bash" ]
        args:
          - "-c"
          # Script always succeeds if it runs (echo exits with 0)
          - |
            echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
            python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
            echo 'options use-vc' >> /etc/resolv.conf
            let count=0
            while [[ ! -f /mnt/shared/user.yaml && $count -lt 50 ]]; do
              echo "fence container waiting for /mnt/shared/user.yaml";
              sleep 2
              let count=$count+1
            done
            if [[ "$SYNC_FROM_DBGAP" != True && "$ADD_DBGAP" != "true" ]]; then
              if [[ -f /mnt/shared/user.yaml ]]; then
                echo "running fence-create"
                time fence-create sync --arborist http://arborist-service --yaml /mnt/shared/user.yaml
              else
                echo "/mnt/shared/user.yaml did not appear within timeout :-("
                false  # non-zero exit code
              fi
              exitcode=$?
            else
              output=$(mktemp "/tmp/fence-create-output_XXXXXX")
              if [[ -f /mnt/shared/user.yaml && "$ONLY_DBGAP" != "true" ]]; then
                echo "Running fence-create dbgap-sync with user.yaml - see $output"
                time fence-create sync --arborist http://arborist-service --sync_from_dbgap "True" --projects /var/www/fence/projects.yaml --yaml /mnt/shared/user.yaml 2>&1 | tee "$output"
              else
                echo "Running fence-create dbgap-sync without user.yaml - see $output"
                time fence-create sync --arborist http://arborist-service --sync_from_dbgap "True" --projects /var/www/fence/projects.yaml 2>&1 | tee "$output"
              fi
              exitcode="${PIPESTATUS[0]}"
              echo "$output"
              # Echo what files we are seeing on dbgap ftp to Slack
              # We only do this step every 12 hours and not on weekends to reduce noise
              if [[ -n "$SLACK_SEND_DBGAP" && "$SLACK_SEND_DBGAP" = True ]]; then
                files=$(grep "Reading file" "$output")
                let hour=$(date -u +10#%H)
                let dow=$(date -u +10#%u)
                if ! (( hour % 12 )) && (( dow < 6 )); then
                  if [ "${slackWebHook}" != 'None' ]; then
                    curl -X POST --data-urlencode "payload={\"text\": \"FenceHelper: \n\`\`\`\n${files}\n\`\`\`\"}" "${slackWebHook}"
                  fi
                fi
              fi
            fi
            if [[ $exitcode -ne 0 && "${slackWebHook}" != 'None' ]]; then
              emptyfile=$(grep "EnvironmentError:" "$output")
              if [ ! -z "$emptyfile" ]; then
                curl -X POST --data-urlencode "payload={\"text\": \"JOBSKIPPED: User sync skipped on ${gen3Env} ${emptyfile}\"}" "${slackWebHook}";
              else
                curl -X POST --data-urlencode "payload={\"text\": \"JOBFAIL: User sync failed on ${gen3Env}\"}" "${slackWebHook}"
              fi
            fi
            echo "Exit code: $exitcode"
            exit "$exitcode"
      - name: awshelper
        GEN3_AWSHELPER_IMAGE|-image: quay.io/cdis/awshelper:master-|
        imagePullPolicy: Always
        volumeMounts:
          - name: shared-data
            mountPath: /mnt/shared
        command: ["/bin/bash" ]
        args:
          - "-c"
          - |
            GEN3_HOME=/home/ubuntu/cloud-automation
            source "${GEN3_HOME}/gen3/lib/utils.sh"
            gen3_load "gen3/gen3setup"

            if [ "${userYamlS3Path}" = 'none' ]; then
              echo "s3 yaml not provided - bailing out"
              exit 1
            fi
            #-----------------
            echo "awshelper downloading ${userYamlS3Path} to /mnt/shared/useryaml";
            n=0
            until [ $n -ge 5 ]; do
              echo "Download attempt $n"
              aws s3 cp "${userYamlS3Path}" /mnt/shared/user.yaml && break
              n=$[$n+1]
              sleep 2
            done
            if [[ ! -f /mnt/shared/user.yaml ]]; then
              echo "awshelper failed to download /mnt/shared/user.yaml"
              exit 1
            fi
            #-----------
            echo "awshelper updating etl configmap"
            if ! gen3 gitops etl-convert < /mnt/shared/user.yaml > /tmp/user.yaml; then
              echo "ERROR: failed to generate ETL config"
              exit 1
            fi
            kubectl delete configmap fence > /dev/null 2>&1
            kubectl create configmap fence --from-file=/tmp/user.yaml
            if [ "${slackWebHook}" != 'None' ]; then
              curl -X POST --data-urlencode "payload={\"text\": \"AWSHelper: Syncing users on ${gen3Env}\"}" "${slackWebHook}"
            fi
            echo "Helper exit ok"
        env:
          - name: userYamlS3Path
            valueFrom:
                configMapKeyRef:
                  name: manifest-global
                  key: useryaml_s3path
          - name: gen3Env
            valueFrom:
              configMapKeyRef:
                name: global
                key: environment
          - name: slackWebHook
            valueFrom:
              configMapKeyRef:
                name: global
                key: slack_webhook
      restartPolicy: Never
