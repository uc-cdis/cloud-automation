---
# invoke with:
# gen3 runjob config-fence \
#   CONVERT_OLD_CFG ""
#
# to attempt to convert old configuration invoke with:
# gen3 runjob config-fence \
#   CONVERT_OLD_CFG "true"
#
apiVersion: batch/v1
kind: Job
metadata:
  name: config-fence
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      serviceAccountName: useryaml-job
      volumes:
        - name: shared-data
          emptyDir: {}
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
        - name: old-config-volume
          secret:
            secretName: "fence-secret"
        - name: json-secret-volume
          secret:
            secretName: "fence-json-secret"
# -----------------------------------------------------------------------------
      containers:
      - name: fence
        image: quay.io/cdis/fence:master
        imagePullPolicy: Always
        env:
          - name: PYTHONPATH
            value: /var/www/fence
          - name: CONVERT_OLD_CFG
            GEN3_CONVERT_OLD_CFG|-value: ""-|
        volumeMounts:
          - name: "creds-volume"
            readOnly: true
            mountPath: "/var/www/fence/creds.json"
            subPath: creds.json
          - name: "config-helper"
            readOnly: true
            mountPath: "/var/www/fence/config_helper.py"
            subPath: config_helper.py
          - name: shared-data
            mountPath: /mnt/shared
# -----------------------------------------------------------------------------
# DEPRECATED! Remove when all commons are no longer using local_settings.py
#             for fence.
# -----------------------------------------------------------------------------
          - name: "old-config-volume"
            readOnly: true
            mountPath: "/var/www/fence/local_settings.py"
            subPath: local_settings.py
          - name: "json-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_credentials.json"
            subPath: fence_credentials.json
# -----------------------------------------------------------------------------
        command: ["/bin/bash"]
        args:
          - "-c"
          # Script always succeeds if it runs (echo exits with 0)
          - |
            echo "generating default fence configuration..."
            python /fence/cfg_help.py create --config_path new-fence-config.yaml

            if [[ -f /var/www/fence/creds.json ]]; then
              echo ""
              echo "injecting creds.json into fence configuration..."
              python /var/www/fence/config_helper.py -i /var/www/fence/creds.json -c new-fence-config.yaml
            else
              echo "ERROR: /var/www/fence/creds.json not found!"
              echo "       Only generating default config..."
            fi

            if [[ -n "$CONVERT_OLD_CFG" ]]; then
              if [[ -f /var/www/fence/local_settings.py ]]; then
                echo ""
                echo "injecting local_settings.py into fence configuration..."
                python /var/www/fence/config_helper.py --other_files_to_inject /var/www/fence/local_settings.py -c new-fence-config.yaml
              else
                echo "ERROR: /var/www/fence/local_settings.py not found!"
                echo "       Cannot inject config vars, skipping..."
              fi
            fi

            cp new-fence-config.yaml /mnt/shared/new-fence-config.yaml

      - name: awshelper
        GEN3_AWSHELPER_IMAGE|-image: quay.io/cdis/awshelper:master-|
        imagePullPolicy: Always
        volumeMounts:
          - name: shared-data
            mountPath: /mnt/shared
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            # wait for other image to generate config
            let count=0
            while [[ ! -f /mnt/shared/new-fence-config.yaml && $count -lt 50 ]]; do
              echo "waiting for /mnt/shared/new-fence-config.yaml"
              sleep 2
              let count=$count+1
            done

            if [[ -f /mnt/shared/new-fence-config.yaml ]]; then
              # load yaml file into secrets
              if kubectl get secrets/fence-config > /dev/null 2>&1; then
                kubectl delete secret fence-config
              fi
              echo "saving fence configuration into fence-config secret..."
              kubectl create secret generic fence-config "--from-file=fence-config.yaml=/mnt/shared/new-fence-config.yaml"
            else
              echo "/mnt/shared/new-fence-config.yaml did not appear within timeout :-("
            fi

      restartPolicy: Never
