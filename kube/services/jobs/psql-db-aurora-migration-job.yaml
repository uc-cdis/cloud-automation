---
apiVersion: batch/v1
kind: Job
metadata:
  name: psql-db-aurora-migration
spec:
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - on-demand
          - weight: 99
            preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - ONDEMAND
      serviceAccountName: psql-db-copy-sa
      containers:
        - name: pgdump
          image: quay.io/cdis/awshelper:master
          imagePullPolicy: Always
          env:
            - name: gen3Env
              valueFrom:
                configMapKeyRef:
                  name: global
                  key: environment
            - name: JENKINS_HOME
              value: "devterm"
            - name: GEN3_HOME
              value: /home/ubuntu/cloud-automation
          command: [ "/bin/bash" ]
          args:
            - "-c"
            - |
              # This job migrates (takes backup and restores) the databases in a Gen3 instance to an Aurora RDS cluster.
              # Requirements:
              # 1. Aurora server credentials should be present in the Gen3Secrets/creds.json with name 'aurora'.
              # 2. Ensure that `gen3 psql aurora` and `gen3 secrets decode aurora-creds` work as expected.
              # 3. The job needs the "psql-db-copy-sa" service account with the necessary permissions to read secrets from all relevant namespaces.
              
              source "${GEN3_HOME}/gen3/lib/utils.sh"
              gen3_load "gen3/gen3setup"
              namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
              default_databases=($(echo -e "$(gen3 db services)" | sort -r))
              date_str=$(date -u +%y%m%d_%H%M%S)
              databases=("${default_databases[@]}")
              gen3_log_info "databases: ${databases[@]}"

              # find Aurora Server credentials
              aurora_host_name=$(gen3 secrets decode aurora-creds creds.json | jq -r '.db_host')
              aurora_master_username=$(gen3 secrets decode aurora-creds creds.json | jq -r '.db_username')
              aurora_master_password=$(gen3 secrets decode aurora-creds creds.json | jq -r '.db_password')
              aurora_master_database=$(gen3 secrets decode aurora-creds creds.json | jq -r '.db_database')

              gen3_log_info "Aurora Creds: \n aurora_host_name: $aurora_host_name \n aurora_master_username: $aurora_master_username \n aurora_master_database: $aurora_master_database"

              # Verify important variables are present
              if [ -z "$aurora_host_name" ] || [ -z "$aurora_master_username" ] || [ -z "$aurora_master_password" ] || [ -z "$aurora_master_database" ]; then
                gen3_log_err "Aurora credentials are missing. Exiting."
                exit 1
              fi

              new_resources=""

              # Looping through each service to:
              # - Extract the database credentials.
              # - Check if the user already exists, if not, create the user.
              # - Grant required privileges.
              # - Create the database.
              # - Backup and restore the database on the Aurora Cluster.
              for database in "${databases[@]}"; do
                  for secret_name in "${database}-creds creds.json" "$database-g3auto dbcreds.json"; do
                      creds="$(gen3 secrets decode $secret_name)"
                      if [ $? -eq 0 ] && [ ! -z "$creds" ]; then
                          db_hostname=$(echo $creds | jq -r .db_host)
                          db_username=$(echo $creds | jq -r .db_username)
                          db_password=$(echo $creds | jq -r .db_password)
                          db_database=$(echo $creds | jq -r .db_database)
                          gen3_log_info "Extracting service credentials for $database from $secret_name: \n db_hostname: $db_hostname \n db_username: $db_username \n db_database: $db_database \n"
                          break
                      fi
                  done

                  if [ -z "$db_hostname" ] || [ -z "$db_username" ] || [ -z "$db_password" ] || [ -z "$db_database" ]; then
                      gen3_log_err "Failed to extract database credentials for $database"
                      continue
                  fi

                  # Try to connect to the Aurora database with the extracted credentials.
                  # If the connection is successful, it means the user already exists.
                  # If not, create the user.

                  PGPASSWORD=${db_password} psql -h $aurora_host_name -U "${database}_user_${namespace}" -d postgres -c "\q"
                  if [ $? -eq 0 ]; then
                    gen3_log_info "User ${database}_user_${namespace}, password already exists"
                  else
                    gen3 psql aurora -c "CREATE USER \"${database}_user_${namespace}\" WITH PASSWORD '$db_password' CREATEDB"
                    if [ $? -ne 0 ]; then
                      gen3_log_err "Failed to create user for $database"
                      continue
                    else
                      gen3_log_info "Database user ${database}_user_${namespace} created successfully"
                    fi
                  fi

                  if [ "$database" == "peregrine" ]; then
                      gen3 psql aurora -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"${database}_user_${namespace}\""
                      if [ $? -ne 0 ]; then
                        gen3_log_err "Failed to grant access to sheepdog tables for peregrine user"
                        continue
                      else
                        gen3_log_info "Access to sheepdog tables granted successfully for peregrine user"
                        new_resources="${new_resources}\nUser: ${database}_user_${namespace}"
                        continue
                      fi
                  fi

                  # Create the database with a unique name by appending namespace and date.
                  PGPASSWORD=${db_password} psql -h $aurora_host_name -U "${database}_user_${namespace}" -d postgres -c "CREATE DATABASE ${database}_${namespace}_${date_str}"
                  if [ $? -ne 0 ]; then
                      gen3_log_err "Failed to create database for $database"
                      continue
                  else
                    gen3_log_info "Database ${database}_${namespace}_${date_str} created successfully"
                    new_resources="${new_resources}\nDatabase: ${database}_${namespace}_${date_str}, User: ${database}_user_${namespace}"
                  fi

                  # Backup the current database and restore it to the newly created database.
                  gen3 db backup $database | PGPASSWORD=${db_password} psql -h $aurora_host_name -U "${database}_user_${namespace}" -d "${database}_${namespace}_${date_str}"
                  if [ $? -ne 0 ]; then
                    gen3_log_err "Failed to backup and restore database for $database"
                  else
                    gen3_log_info "Database $database restored successfully to ${database}_${namespace}_${date_str}"
                    new_resources="${new_resources}\nRestored Database: ${database}_${namespace}_${date_str}"
                  fi
              done

              # Logging the newly created resources, sleep for 600 seconds.
              # The sleep is provided to keep the pod running for a while after the job is finished
              # to allow the user to check the logs.
              gen3_log_info "New resources created:\n$new_resources"
              sleep 600
      restartPolicy: Never
