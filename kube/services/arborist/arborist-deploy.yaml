apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: arborist-deployment
spec:
  selector:
    matchLabels:
      app: arborist
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: arborist
        GEN3_DATE_LABEL
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - arborist
              topologyKey: "kubernetes.io/hostname"
      automountServiceAccountToken: false
      volumes:
        - name: projects
          configMap:
            name: "projects"
        - name: "creds-volume"
          readOnly: true
          mountPath: "/var/www/arborist/creds.json"
          subPath: creds.json
      containers:
      - name: arborist
        GEN3_ARBORIST_IMAGE
        imagePullPolicy: Always
        env:
          - name: PGDATABASE
            value: # TODO Do we need this here instead of setting up in command below???
          - name: PGUSER
            value: # TODO ???
          - name: PGPASSWORD
            value: # TODO ???
          - name: PGHOST
            value: # TODO ???
          - name: PGPORT
            value: # TODO ???
          - name: PGSSLMODE
            value: disable
          - name: JWKS_ENDPOINT
            value: "http://fence-service/.well-known/jwks"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
        ports:
        - containerPort: 80
        command: ["/bin/bash" ]
        args:
          - "-c"
          - |
            eval $(python 2> /dev/null <<EOM
            import json

            creds = json.load(open('/var/www/arborist/creds.json', 'r'))
            print('declare -A db_creds')
            for key in ['db_host', 'db_username', 'db_password', 'db_database']:
              print("db_creds['%s']='%s'" % (key, creds[key]))
            EOM
            )

            # set env vars
            export PGDATABASE = "${db_creds[db_database]}"
            export PGUSER = "${db_creds[db_username]}"
            export PGPASSWORD = "${db_creds[db_password]}"
            export PGHOST = "${db_creds[db_host]}"
            export PGPORT = "5432"
            export PGSSLMODE = "disable"

            ./migrations/latest