apiVersion: apps/v1
kind: Deployment
metadata:
  name: manifestservice-deployment
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: manifestservice
      release: production
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: manifestservice
        release: production
        s3: "yes"
        public: "yes"
        userhelper: "yes"
        netvpc: "yes"
        GEN3_DATE_LABEL
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccountName: manifestservice-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 25
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - manifestservice
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - spot
          - weight: 99
            preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - SPOT
      automountServiceAccountToken: false
      volumes:
        - name: wsgi-config
          configMap:
            name: manifestservice-wsgi
        - name: nginx-config
          configMap:
            name: manifestservice-nginx-configmap
        - name: nginx-main-config
          configMap:
            name: sidcar-nginx-main   
        - name: config-volume
          secret:
            secretName: "manifestservice-g3auto"
        - name: cert-volume
          secret:
            secretName: "cert-manifestservice-service"
        - name: ca-volume
          secret:
            secretName: "service-ca"
      terminationGracePeriodSeconds: 50
      containers:
        - name: manifestservice
          GEN3_MANIFESTSERVICE_IMAGE
          env:
          - name: REQUESTS_CA_BUNDLE
            #
            # override python 'requests' SSL certificate bundle
            # to use system trusted certs
            # which includes our private certificate authority
            #
            value: /etc/ssl/certs/ca-certificates.crt
          - name: MANIFEST_SERVICE_CONFIG_PATH
            value: /var/gen3/config/config.json
          - name: GEN3_DEBUG
            GEN3_DEBUG_FLAG|-value: "False"-|
          volumeMounts:
            - name: "wsgi-config"
              mountPath: "/manifestservice/deployment/wsgi/gunicorn.conf.py"
              subPath: gunicorn.conf.py
            - name: "config-volume"
              readOnly: true
              mountPath: "/var/gen3/config/"  
            - name: "cert-volume"
              readOnly: true
              mountPath: "/mnt/ssl/service.crt"
              subPath: "service.crt"
            - name: "cert-volume"
              readOnly: true
              mountPath: "/mnt/ssl/service.key"
              subPath: "service.key"
            - name: "ca-volume"
              # See https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
              readOnly: true
              mountPath: "/usr/local/share/ca-certificates/cdis/cdis-ca.crt"
              subPath: "ca.pem"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 300Mi
            limits:
              memory: 1024Mi
          livenessProbe:
            httpGet:
              path: /_status
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: 8000
        - name: sidecar-nginx
          image: quay.io/cdis/nginx-sidecar:nginx-sidecar-feat_nginx-sidecar
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /_status
              port: http
          volumeMounts:
            - name: "nginx-main-config"
              mountPath: "/etc/nginx/nginx.conf"
              subPath: "nginx.conf"
            - name: "nginx-config"
              mountPath: "/etc/nginx/conf.d/default.conf"
              subPath: default.conf