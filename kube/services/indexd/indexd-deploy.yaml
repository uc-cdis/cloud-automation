apiVersion: apps/v1
kind: Deployment
metadata:
  name: indexd-deployment
  annotations:
    gen3.io/network-ingress: "fence,presigned-url-fence,fenceshib,peregrine,sheepdog,ssjdispatcherjob,metadata"
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: indexd
      release: production
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /aggregated_metrics
        prometheus.io/port: "6567"
      labels:
        netnolimit: "yes"
        app: indexd
        release: production
        public: "yes"
        tags.datadoghq.com/service: "indexd"
        GEN3_ENV_LABEL
        GEN3_INDEXD_VERSION
        GEN3_DATE_LABEL
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - indexd
              topologyKey: "kubernetes.io/hostname"
      automountServiceAccountToken: false
      volumes:
        - name: config-volume
          secret:
            secretName: "indexd-secret"
        - name: creds-volume
          secret:
            secretName: "indexd-creds"
        - name: config-helper
          configMap:
            name: config-helper
        - name: cert-volume
          secret:
            secretName: "cert-indexd-service"
        - name: ca-volume
          secret:
            secretName: "service-ca"
        - name: logs-folder
          emptyDir: {}
      containers:
      - name: indexd
        GEN3_INDEXD_IMAGE
        env:
          - name: DD_ENABLED
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: dd_enabled
                optional: true
          - name: DD_ENV
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/env']
          - name: DD_SERVICE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/service']
          - name: DD_VERSION
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tags.datadoghq.com/version']
          - name: DD_LOGS_INJECTION
            value: "true"
          - name: DD_PROFILING_ENABLED
            value: "true"
          - name: DD_TRACE_SAMPLE_RATE
            value: "1"
          - name: DD_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: GEN3_DEBUG
            GEN3_DEBUG_FLAG|-value: "False"-|
          - name: DIST
            valueFrom:
              configMapKeyRef:
                name: manifest-indexd
                key: dist
                optional: true
          - name: ARBORIST
            valueFrom:
              configMapKeyRef:
                name: manifest-indexd
                key: arborist
                optional: true
          - name: HOSTNAME
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: hostname
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /_status
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 30
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 6567
        volumeMounts:
          - name: "config-volume"
            readOnly: true
            mountPath: "/var/www/indexd/local_settings.py"
            subPath: "local_settings.py"
          - name: "creds-volume"
            readOnly: true
            mountPath: "/var/www/indexd/creds.json"
            subPath: creds.json
          - name: "config-helper"
            readOnly: true
            mountPath: "/var/www/indexd/config_helper.py"
            subPath: config_helper.py
          - name: "cert-volume"
            readOnly: true
            mountPath: "/mnt/ssl/service.crt"
            subPath: "service.crt"
          - name: "cert-volume"
            readOnly: true
            mountPath: "/mnt/ssl/service.key"
            subPath: "service.key"
          - name: "ca-volume"
            # See https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
            readOnly: true
            mountPath: "/usr/local/share/ca-certificates/cdis/cdis-ca.crt"
            subPath: "ca.pem"
          - name: logs-folder
            mountPath: "/var/log/nginx/"
        resources:
          requests:
            cpu: 0.5
            memory: 1024Mi
          limits:
            cpu: 1.0
            memory: 2048Mi
      - name: nginx-prometheus-exporter-wrapper
        GEN3_NGINX_PROMETHEUS_EXPORTER_WRAPPER_IMAGE|-image: quay.io/cdis/nginx-prometheus-exporter-wrapper:pybase3-1.4.0-|
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            attempt=0
            maxAttempts=12
            while true
            do
              nginx_status_response=$(curl -L -s -o /dev/null -w "%{http_code}" -X GET http://localhost/nginx_status)
              echo "initializing nginx-prometheus-exporter..."
              echo "nginx_status_response: $nginx_status_response"
              if [ "$nginx_status_response" == 200 ]; then
                echo "nginx_status is finally up and running. Proceed with the metrics exporting..."
                /usr/bin/exporter -nginx.scrape-uri http://127.0.0.1/nginx_status
              else
                echo "The nginx_status endpoint is not ready yet... attempt #${attempt}"
                sleep 5
                if [ $attempt -eq $maxAttempts ];then
                  echo "The nginx_status endpoint was never initialized properly, keep the sidecar running in sleep mode to prevent the entire pod from failing..."
                  sleep infinity
                fi
              fi
              attempt=$(( $attempt + 1 ));
            done
        ports:
        - containerPort: 9113
      - name: uwsgi-exporter
        GEN3_UWSGI_EXPORTER_IMAGE|-image: registry.hub.docker.com/timonwong/uwsgi-exporter:v1.0.0-|
        args: ["--stats.uri", "http://127.0.0.1/uwsgi_status"]
        ports:
        - containerPort: 9117
      - name: nginx-logs-exporter
        GEN3_NGINX_LOGS_EXPORTER_IMAGE|-image: quay.io/martinhelmich/prometheus-nginxlog-exporter:v1.7.1-|
        args: ["/mnt/nginxlogs/access_not_json.log"]
        ports:
        - containerPort: 4040
        volumeMounts:
        - name: logs-folder
          mountPath: "/mnt/nginxlogs/"
