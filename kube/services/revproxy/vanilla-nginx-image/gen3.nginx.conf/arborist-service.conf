# Policy Engine Endpoints
#
# IMPORTANT WARNING: Be careful modifying any of this as it is carefully tuned to NOT allow
#                    users to see other users authorization. The policy engine API itself
#                    does not have many guardrails in place to prevent this internally.
#                    It relies on upstream control of the access to certain endpoints.
#
# Endpoints to be careful about exposing:
#        - {{arborist}}/auth/request
#            - By default this allows both passing a full user token OR just specifying
#              a user ID. If you open this publically it means anyone could request
#              any users authorization information.
#        - {{arborist}}/auth/mapping
#            - By default this allows passing a username, meaning that anyone could
#              request anyone else's authorization information
#
# NOTE: The above does not present a security concern around impersonation (e.g. no
#       one could actually get a token for a different user with the above, so they
#       couldn't impersonate another user to get access to data). But it could expose
#       what datasets a different user has access to, which is generally not something
#       that should be exposed publically.

#
# workspace AuthZ-proxy uses arborist to provide authorization to workpace services
# that don't implement our authn or authz i.e. shiny, jupyter.
#
location = /gen3-authz {
    internal;
    error_page 400 =403 @errorworkspace;
    error_page 500 =403 @errorworkspace;
    
    # avoid setting $upstream in authz subrequests ...
    set $upstream_authz http://arborist-service.$namespace.svc.cluster.local;

    proxy_pass $upstream_authz/auth/proxy?resource=$authz_resource&method=$authz_method&service=$authz_service;

    proxy_pass_request_body off;
    proxy_set_header Authorization "$access_token";
    proxy_set_header Content-Length "";
    proxy_set_header X-Forwarded-For "$realip";
    proxy_set_header X-UserId "$userid";
    proxy_set_header X-ReqId "$request_id";
    proxy_set_header X-SessionId "$session_id";
    proxy_set_header X-VisitorId "$visitor_id";
    proxy_set_header X-Original-URI $request_uri;
    proxy_intercept_errors on;

    # nginx bug that it checks even if request_body off
    client_max_body_size 0;
}

#
# authorization endpoint
# https://hostname/authz?resource=programs/blah&method=acb&service=xyz
#
location ~ /authz/? {
    if ($csrf_check !~ ^ok-\S.+$) {
        return 403 "failed csrf check";
    }
    set $proxy_service  "arborist";
    set $upstream http://arborist-service.$namespace.svc.cluster.local;

    proxy_pass $upstream/auth/proxy?resource=$arg_resource&method=$arg_method&service=$arg_service;
}

location = /authz/resources {
    if ($csrf_check !~ ^ok-\S.+$) {
        return 403 "failed csrf check";
    }
    set $proxy_service  "arborist";
    set $upstream http://arborist-service.$namespace.svc.cluster.local;

    proxy_pass $upstream/auth/resources;
}

location = /authz/mapping {
    if ($csrf_check !~ ^ok-\S.+$) {
        return 403 "failed csrf check";
    }

    # Do not expose POST /auth/mapping
    limit_except GET {
        deny all;
    }

    set $proxy_service  "arborist";
    set $upstream http://arborist-service.$namespace.svc.cluster.local;

    # Do not pass the username arg here! Otherwise anyone can see anyone's access.
    # Arborist will fall back to parsing the jwt for username.
    proxy_pass $upstream/auth/mapping;
}

location = /authz/policy {
    if ($csrf_check !~ ^ok-\S.+$) {
        return 403 "failed csrf check";
    }

    # only allow GET requests
    limit_except GET {
      deny all;
    }

    # authz check to see if the user has access to the policy data
    set $authz_resource "/services/arborist/policy";
    set $authz_method "read";
    set $authz_service "arborist";
    # be careful - sub-request runs in same context as this request
    auth_request /gen3-authz;

    set $proxy_service arborist;
    set $upstream http://arborist-service.$namespace.svc.cluster.local;
    rewrite ^/authz/(.*) /$1 break;
    proxy_pass $upstream;
    proxy_redirect http://$host/ https://$host/authz/;
}

#
# Little endpoint for testing that authz is being enforced
#
location = /gen3-authz-test {
    set $authz_resource "/fail";
    set $authz_method "user";
    set $authz_service "bogus";

    # be careful - sub-request runs in same context as this request
    auth_request /gen3-authz;

    set $proxy_service  "fence";
    set $upstream http://fence-service.$namespace.svc.cluster.local;
    proxy_pass $upstream/$authz_method;
}
