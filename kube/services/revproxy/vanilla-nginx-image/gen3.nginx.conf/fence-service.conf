# AuthN-proxy uses fence to provide authentication to downstream services
# that don't implement our auth i.e. shiny, jupyter.
# Fence also sets the REMOTE_USER header to the username
# of the logged in user for later use
location /authn-proxy {
    internal;
    set $proxy_service  "fence";
    set $upstream_auth http://fence-service${des_domain}/user/anyaccess;
    proxy_pass $upstream_auth;
    proxy_pass_request_body off;
    proxy_set_header Authorization "$access_token";
    proxy_set_header Content-Length "";
    proxy_set_header X-Forwarded-For "$realip";
    proxy_set_header X-UserId "$userid";
    proxy_set_header   X-ReqId "$request_id";
    proxy_set_header   X-SessionId "$session_id";
    proxy_set_header   X-VisitorId "$visitor_id";

    # nginx bug that it checks even if request_body off
    client_max_body_size 0;
}

location /user/ {
    if ($csrf_check !~ ^ok-\S.+$) {
      return 403 "failed csrf check";
    }

    set $proxy_service  "fence";
    set $upstream http://fence-service$des_domain;
    rewrite ^/user/(.*) /$1 break;
    proxy_pass $upstream;
}

location /user/register {
    # Like /user/ but without CSRF check. Registration form submission is
    # incompatible with revproxy-level cookie-to-header CSRF check.
    # Fence enforces its own CSRF protection here so this is OK.
    set $proxy_service  "fence";
    set $upstream http://fence-service$des_domain;
    rewrite ^/user/(.*) /$1 break;
    proxy_pass $upstream;
}

location /user/data/download {
    if ($csrf_check !~ ^ok-\S.+$) {
      return 403 "failed csrf check";
    }

    set $proxy_service  "presigned_url_fence";
    set $upstream http://presigned_url_fence-service$des_domain;
    rewrite ^/user/(.*) /$1 break;
    proxy_pass $upstream;
}

location /user/metrics {
    deny all;
}

# OpenID Connect Discovery Endpoints
location /.well-known/ {
    if ($csrf_check !~ ^ok-\S.+$) {
      return 403 "failed csrf check";
    }

    set $proxy_service  "fence";
    set $upstream http://fence-service$des_domain;
    proxy_pass $upstream;
}
