#
# Note: apply this file via apply_config to fill in the DNS
#   resolver required for cookie-based routing to canary/test services
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: revproxy-nginx-conf
data:
  userid.js: |
      /** global supporting atob polyfill below */
      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

      /**
       * base64 decode polyfill from
       *     https://github.com/davidchambers/Base64.js/blob/master/base64.js
       */
      function atob(input) {
        var str = String(input).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=
        if (str.length % 4 == 1) {
          return input;
        }
        for (
          // initialize result and counters
          var bc = 0, bs, buffer, idx = 0, output = '';
          // get next character
          buffer = str.charAt(idx++);
          // character found in table? initialize bit storage and add its ascii value;
          ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
            // and if not first of each 4 characters,
            // convert the first 8 bits to one ascii character
            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
        ) {
          // try to find character in table (0-63, not found => -1)
          buffer = chars.indexOf(buffer);
        }
        return output;
      }

      /**
       * nginscript helper for parsing user out of JWT tokens.
       * We appear to have access to the 'access_token' variable
       * defined in nginx.conf when this function runs via 'js_set'.
       * see https://www.nginx.com/blog/introduction-nginscript/
       *
       * @param {*} req
       * @param {*} res
       */
      function userid(req, res) {
        var token = req.variables["access_token"];
        var user = "uid:null,unknown@unknown";

        if (token) {
          user = token;
          var raw = atob((token.split('.')[1] || "").replace('-', '+').replace('_', '/'));
          if (raw) {
            try {
              var data = JSON.parse(raw);
              if (data) {
                if (data.context && data.context.user && data.context.user.name) {
                  user = "uid:" + data.sub + "," + data.context.user.name;
                }
              }
            } catch (err) {}
          }
        }
        return user;
      }

  nginx.conf: |
      user www-data;
      worker_processes 4;

      pid /run/nginx.pid;

      load_module modules/ngx_http_js_module.so;
      load_module modules/ngx_http_perl_module.so;

      env POD_NAMESPACE;

      events {
      	worker_connections 768;
      	# multi_accept on;
      }

      http {

      	##
      	# Basic Settings
      	##
      	sendfile on;
      	tcp_nopush on;
      	tcp_nodelay on;
      	keepalive_timeout 65;
      	types_hash_max_size 2048;
        port_in_redirect off;
      	# server_tokens off;

        # For websockets
        map $http_upgrade $connection_upgrade {
          default upgrade;
          ''      close;
        }

        map $proxy_protocol_addr $initialip {
          "" $http_x_forwarded_for;
          default $proxy_protocol_addr;
        }

        map $initialip $realip {
          "" $remote_addr; #if this header missing set remote_addr as real ip
          default $initialip;
        }

      	# server_names_hash_bucket_size 64;
      	# server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # Note - nginscript js_set, etc get processed
        #   on demand: https://www.nginx.com/blog/introduction-nginscript/
        #
        js_include userid.js;
        js_set $userid userid;

      	##
      	# Logging Settings
      	##
        log_format aws   '$realip - $userid [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';
      	access_log /dev/stdout aws;
      	error_log /dev/stderr;

      	##
      	# Gzip Settings
      	##
        gzip on;
        gzip_disable "msie6";
        gzip_proxied any;
        gzip_types
          text/css
          text/javascript
          text/xml
          text/plain
          application/javascript
          application/x-javascript
          application/json;

        ##
        # Namespace
        ##
        perl_set $namespace 'sub { return $ENV{"POD_NAMESPACE"}; }';

        ##
      	# Proxy Settings
      	##
        # Serve internet facing http requests via this, and redirect to https
        server {
               listen      82 default_server proxy_protocol;
               listen      83;
               rewrite     ^   https://$host$request_uri? permanent;
        }
        # Serve internet facing https requests and internal http requests here
      	server {
          listen 81 proxy_protocol;
          listen 80;
          listen 443 ssl;

          ssl_certificate     /mnt/ssl/external.crt;
          ssl_certificate_key /mnt/ssl/external.key;
          ssl_protocols       TLSv1.1 TLSv1.2;
          ssl_ciphers         HIGH:!aNULL:!MD5;

      		server_tokens off;
      		add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
      		add_header X-Frame-Options "SAMEORIGIN";
      		if ($http_x_forwarded_proto = "http") { return 301 https://$host$request_uri; }
          # DNS resolver required to resolve dynamic hostnames, btw - kubedns may not support ipv6
          resolver kube-dns.kube-system.svc.cluster.local ipv6=off;

          set $access_token "";
          set $csrf_check "ok-tokenauth";
          if ($cookie_access_token) {
              set $access_token "bearer $cookie_access_token";
              # cookie auth requires csrf check
              set $csrf_check "fail";
          }
          if ($http_authorization) {
              # Authorization header is present - prefer that token over cookie token
              set $access_token "$http_authorization";
          }

          #
          # Note - need to repeat this line in location blocks that call proxy_set_header,
          #   as nginx proxy module inherits proxy_set_header if and only if current level does
          #   not set headers ... http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header
          #
          proxy_set_header   Authorization "$access_token";
          proxy_set_header   X-Forwarded-For "$realip";
          proxy_set_header   X-UserId "$userid";

          #
          # CSRF check
          # This block requires a csrftoken for all POST requests.
          #
          if ($cookie_csrftoken = $http_x_csrf_token) {
            # this will fail further below if cookie_csrftoken is empty
            set $csrf_check "ok-$cookie_csrftoken";
          }
          if ($request_method != "POST") {
            set $csrf_check "ok-$request_method";
          }
          if ($cookie_access_token = "") {
            # do this again here b/c empty cookie_csrftoken == empty http_x_csrf_token - ugh
            set $csrf_check "ok-tokenauth";
          }

          location / {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_pass http://portal-service;
          }

          location /index/ {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_pass http://indexd-service/;
          }

          location /coremetadata/ {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              # redirect to coremetadata landing page if header does not specify otherwise
              if ($http_accept !~ (application/json|x-bibtex)) {
                rewrite ^/coremetadata/(.*) /files/$1 redirect;
              }

              proxy_pass http://pidgin-service/;
          }

          # GA4GH endpoint for DOS resolver
          location /ga4gh/ {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_pass http://indexd-service/ga4gh/;
          }

          location /user/ {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_pass http://fence-service/;
          }
          location /api/v0/submission/getschema {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_next_upstream off;
              proxy_pass http://peregrine-service/v0/submission/getschema;
          }
          # Simplify external access to health checks
          location /peregrine/_status {
              proxy_pass http://peregrine-service/_status;
          }
          location /peregrine/_version {
              proxy_pass http://peregrine-service/_version;
          }
          location /api/v0/submission/graphql {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }


              gzip off;
              proxy_next_upstream off;
              # Forward the host and set Subdir header so api
              # knows the original request path for hmac signing
              proxy_set_header   Host $host;
              proxy_set_header   Subdir /api;
              proxy_set_header   Authorization "$access_token";
              proxy_set_header   X-Forwarded-For "$realip";
              proxy_set_header   X-UserId "$userid";
              proxy_connect_timeout 300;
              proxy_send_timeout 300;
              proxy_read_timeout 300;
              send_timeout 300;
              proxy_pass http://peregrine-service/v0/submission/graphql;
          }
          location /api/v0/flat-search/ {
              #
              # Arranger UI does not set csrf headers ..
              #
              #if ($csrf_check !~ ^ok-\S.+$) {
              #  return 403 "failed csrf check";
              #}
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_pass http://arranger-service/;
          }
          location /api/ {
              if ($csrf_check !~ ^ok-\S.+$) {
                return 403 "failed csrf check";
              }
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }

              proxy_next_upstream off;
              # Forward the host and set Subdir header so api
              # knows the original request path for hmac signing
              proxy_set_header   Host $host;
              proxy_set_header   Subdir /api;
              proxy_set_header   Authorization "$access_token";
              proxy_set_header   X-Forwarded-For "$realip";
              proxy_set_header   X-UserId "$userid";
              proxy_connect_timeout 300;
              proxy_send_timeout 300;
              proxy_read_timeout 300;
              send_timeout 300;
              proxy_pass http://sheepdog-service/;
          }

          # This works if the JupyterHub service is enabled
          # The JupyterHub service is set to use REMOTE_USER auth
          # So it trusts that the user is authenticated if the header
          # is set and passed in
          location /workspace/ {
              auth_request /auth-proxy;
              auth_request_set $remoteUser $upstream_http_REMOTE_USER;
              auth_request_set $saved_set_cookie $upstream_http_set_cookie;
              if ($saved_set_cookie != "") {
                  add_header Set-Cookie $saved_set_cookie always;
              }
              proxy_set_header REMOTE_USER $remoteUser;
              error_page 401 = @error401;

              # Use this variable so nginx won't error out on start
              # if not using the jupyterhub service
              # this isn't dev namespace friendly, must be manually updated
              set $upstream_jh http://jupyterhub-service.$namespace.svc.cluster.local:8000;
              proxy_pass $upstream_jh;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection $connection_upgrade;
              client_max_body_size 0;
          }

          # JupyterHub doesn't currently support chaining logout pages
          # So route the jupyterhub logout to the fence logout path
          # Fence is hence responsible for clearing all cookies
          location = /workspace/hub/logout {
              return 301 $scheme://$host/user/logout?next=/;
          }

          # Exploration page until we finish redoing it
          location ~ ^/(shiny|explore)/ {
              if ($cookie_csrftoken = "") {
                add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
              }
              auth_request /auth-proxy;
              auth_request_set $remoteUser $upstream_http_REMOTE_USER;
              proxy_set_header REMOTE_USER $remoteUser;
              error_page 401 = @error401;

              # Use this variable so nginx won't error out on start
              set $upstream_shiny http://shiny-service.$namespace.svc.cluster.local:3838;
              proxy_pass $upstream_shiny;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection $connection_upgrade;
          }


          # Auth-proxy uses fence to gate access to downstream services
          # that don't implement our auth i.e. shiny, jupyter.
          # Fence also sets the REMOTE_USER header to the username
          # of the logged in user for later use
          location /auth-proxy {
              internal;
              proxy_pass http://fence-service/user/anyaccess;
              proxy_pass_request_body off;
              proxy_set_header Authorization "$access_token";
              proxy_set_header Content-Length "";
              proxy_set_header X-Forwarded-For "$realip";
              proxy_set_header X-UserId "$userid";
              # nginx bug that it checks even if request_body off
              client_max_body_size 0;
          }
          location @error401 {
              return 302 /login;
          }
      	}
      }
