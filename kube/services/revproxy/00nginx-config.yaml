#
# Note: apply this file via apply_config to fill in the DNS
#   resolver required for cookie-based routing to canary/test services
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: revproxy-nginx-conf
  namespace: default 
data:
  nginx.conf: |
      user www-data;
      worker_processes 4;
        
      pid /run/nginx.pid;
      
      events {
      	worker_connections 768;
      	# multi_accept on;
      }
      
      http {
      
      	##
      	# Basic Settings
      	##   
      	sendfile on;
      	tcp_nopush on;
      	tcp_nodelay on;
      	keepalive_timeout 65;
      	types_hash_max_size 2048;
      	# server_tokens off;
      
      	# server_names_hash_bucket_size 64;
      	# server_name_in_redirect off;
      
      	include /etc/nginx/mime.types;
      	default_type application/octet-stream;
      
      	##
      	# Logging Settings
      	##
      
      	access_log /dev/stdout;
      	error_log /dev/stderr;
      
      	##
      	# Gzip Settings
      	##
        gzip on;
        gzip_disable "msie6";
        gzip_types application/javascript;
      
        ##
      	# Proxy Settings
      	##
      	server {
      		listen 80;
      		server_tokens off;
      		add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
      		add_header X-Frame-Options "SAMEORIGIN";
      		if ($http_x_forwarded_proto = "http") { rewrite ^/(.*)$ https://$host$request_uri permanent; }
          # DNS resolver required to resolve dynamic hostnames, btw - kubedns may not support ipv6
          resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
          
          location / {
              set $portal_service http://portal-service.default.svc.cluster.local;
              if ($cookie_portal_service ~ ^[\w-]+$) {
                  # support accessing portal-service in another k8s namespace
                  set $portal_service http://portal-service.$cookie_portal_service.svc.cluster.local;
                  add_header X-debug-portal "$portal_service" always;
              } 
              proxy_pass $portal_service;
          }
          location /index {
              proxy_pass http://indexd-service/;
          }
          location /user {
              proxy_pass http://fence-service/;
          }
          location /api {
              proxy_next_upstream off;
              # Forward the host and set Subdir header so api
              # knows the original request path for hmac signing
              proxy_set_header   Host $host;
              proxy_set_header   Subdir /api;
              proxy_pass http://gdcapi-service/;
          }
      	}
      }
