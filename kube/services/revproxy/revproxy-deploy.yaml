apiVersion: apps/v1
kind: Deployment
metadata:
  name: revproxy-deployment
  annotations:
    gen3.io/network-ingress: "portal,sowerjob"
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: revproxy
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /aggregated_metrics
        prometheus.io/port: "6567"
      labels:
        app: revproxy
        # allow access from workspaces
        userhelper: "yes"
        GEN3_DATE_LABEL
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - revproxy
              topologyKey: "kubernetes.io/hostname"
      automountServiceAccountToken: false
      volumes:
        - name: revproxy-conf
          configMap:
            name: revproxy-nginx-conf
        - name: revproxy-subconf
          configMap:
            name: revproxy-nginx-subconf
        - name: modsec-conf
          configMap:
            name: manifest-modsec
        - name: revproxy-manifest-conf
          configMap:
            name: manifest-revproxy
        - name: helper-js
          configMap:
            name: revproxy-helper-js
        - name: cert-external-volume
          secret:
            secretName: "cert-external"
        - name: cert-volume
          secret:
            secretName: "cert-revproxy-service"
        - name: ca-volume
          secret:
            secretName: "service-ca"
        - name: logs-folder
          emptyDir: {}
        - name: logrotate-nginx-conf
          configMap:
            name: logrotate-nginx-conf
      containers:
      - name: revproxy
        GEN3_REVPROXY_IMAGE|-image: nginx:1.13.9-perl-|
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /_status
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_status
            port: 80
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 6567
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CANARY_PERCENT_JSON
            valueFrom:
              configMapKeyRef:
                name: manifest-canary
                key: json
          - name: MAINTENANCE_MODE
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: maintenance_mode
                optional: true
          - name: ORIGINS_ALLOW_CREDENTIALS
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: origins_allow_credentials
                optional: true
          - name: COOKIE_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: cookie_domain
                optional: true
          - name: DES_NAMESPACE
            valueFrom:
              configMapKeyRef:
                name: manifest-global
                key: des_namespace
                optional: true
          - name: INDEXD_AUTHZ
            valueFrom:
              secretKeyRef:
                name: gateway-g3auto
                key: base64Authz.txt
                optional: true  
          - name: MDS_AUTHZ
            valueFrom:
              secretKeyRef:
                name: metadata-g3auto
                key: base64Authz.txt
                optional: true  
        volumeMounts:
          - name: "revproxy-conf"
            readOnly: true
            mountPath: "/etc/nginx/nginx.conf"
            subPath: nginx.conf
          - name: "revproxy-subconf"
            readOnly: true
            mountPath: "/etc/nginx/gen3.conf"
          - name: "modsec-conf"
            readOnly: true
            mountPath: "/etc/nginx/modsec"
          - name: "revproxy-manifest-conf"
            readOnly: true
            mountPath: "/etc/nginx/manifest-revproxy"
          - name: "helper-js"
            readOnly: true
            mountPath: "/etc/nginx/helpers.js"
            subPath: helpers.js
          - name: "cert-volume"
            readOnly: true
            # revproxy-service domain certificate
            mountPath: "/mnt/ssl/service.crt"
            subPath: "service.crt"
          - name: "cert-volume"
            readOnly: true
            mountPath: "/mnt/ssl/service.key"
            subPath: "service.key"
          - name: "cert-external-volume"
            readOnly: true
            # external hostname certificate
            mountPath: "/mnt/ssl/external.crt"
            subPath: "service.crt"
          - name: "cert-external-volume"
            readOnly: true
            mountPath: "/mnt/ssl/external.key"
            subPath: "service.key"
          - name: "ca-volume"
            # See https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
            readOnly: true
            mountPath: "/usr/local/share/ca-certificates/cdis/cdis-ca.crt"
            subPath: "ca.pem"
          - name: logs-folder
            mountPath: "/var/log/nginx/"
          - name: "logrotate-nginx-conf"
            readOnly: true
            mountPath: "/etc/logrotate.d/logrotate-nginx.conf"
            subPath: logrotate-nginx.conf
        resources:
          requests:
            cpu: 0.5
            memory: 1024Mi
          limits:
            cpu: 1.0
            memory: 2048Mi    
        command: ["/bin/sh" ]
        args:
          - "-c"
          # Script always succeeds if it runs (echo exits with 0)
          # Launch script handles different nginx versions, etc
          - |
            for name in ngx_http_perl_module.so ngx_http_js_module.so ngx_http_headers_more_filter_module.so ngx_http_modsecurity_module.so; do
              if [ -f /etc/nginx/modules/$name ]; then
                echo "load_module modules/$name;" >> /etc/nginx/gen3_modules.conf
              fi
            done
            if [ -f /etc/nginx/modules/ngx_http_modsecurity_module.so -a -f /etc/nginx/modsec/main.conf ]; then
              echo "modsecurity on;" >> /etc/nginx/gen3_server_modsec.conf
              echo "modsecurity_rules_file /etc/nginx/modsec/main.conf;" >> /etc/nginx/gen3_server_modsec.conf
            fi
  
            which logrotate
            RC=$?
            if [ $RC != 0 ]; then
              echo "logrotate is not installed. Do not collect metrics..."
            else
              mkdir -p /var/www/metrics/
              (
                while true; do
                  logrotate --force /etc/logrotate.d/logrotate-nginx.conf
                  sleep 86400
                  done
              ) &
              (
                while true; do
                  curl -s http://127.0.0.1:9113/metrics >> /var/www/metrics/metrics.txt
                  curl -s http://127.0.0.1:4040/metrics >> /var/www/metrics/metrics.txt
                  sleep 10
                done
              ) &
            fi
            exec nginx -g 'daemon off;'
      - name: nginx-prometheus-exporter-wrapper
        GEN3_NGINX_PROMETHEUS_EXPORTER_WRAPPER_IMAGE|-image: quay.io/cdis/nginx-prometheus-exporter-wrapper:pybase3-1.4.0-|
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            attempt=0
            maxAttempts=12

            while true
            do
              nginx_status_response=$(curl -L -s -o /dev/null -w "%{http_code}" -X GET http://localhost/nginx_status)
              echo "initializing nginx-prometheus-exporter..."
              echo "nginx_status_response: $nginx_status_response"
              
              if [ "$nginx_status_response" == 200 ]; then
                echo "nginx_status is finally up and running. Proceed with the metrics exporting..."
                /usr/bin/exporter -nginx.scrape-uri http://127.0.0.1/nginx_status
              else
                echo "The nginx_status endpoint is not ready yet... attempt #${attempt}"
                sleep 5
                if [ $attempt -eq $maxAttempts ];then
                  echo "The nginx_status endpoint was never initialized properly, keep the sidecar running in sleep mode to prevent the entire pod from failing..."
                  sleep infinity
                fi
              fi
              attempt=$(( $attempt + 1 ));
            done
        ports:
        - containerPort: 9113
      - name: nginx-logs-exporter
        GEN3_NGINX_LOGS_EXPORTER_IMAGE|-image: quay.io/martinhelmich/prometheus-nginxlog-exporter:v1.7.1-|
        args: ["/mnt/nginxlogs/access_not_json.log"]
        ports:
        - containerPort: 4040
        volumeMounts:
        - name: logs-folder
          mountPath: "/mnt/nginxlogs/"
