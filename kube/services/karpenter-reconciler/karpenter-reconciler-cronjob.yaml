apiVersion: batch/v1
kind: CronJob
metadata:
  name: karpenter-reconciler-cronjob
  namespace: argo-events
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: gen3job
        spec:
          serviceAccount: karpenter-reconciler
          volumes:
            - name: karpenter-templates-volume
              configMap:
                name: karpenter-templates
          containers:
            - name: karpenter-reconciler
              image: quay.io/cdis/awshelper
              volumeMounts:
                - name: karpenter-templates-volume
                  mountPath: /manifests
              env:
                - name: NODEPOOL_TEMPLATE
                  value: /manifests/nodepool.yaml
                - name: NODECLASS_TEMPLATE
                  value: /manifests/nodeclass.yaml
              command: ["/bin/bash"]
              args:
                - "-c"
                - |
                  #!/bin/bash
                  ENVIRONMENT=$(kubectl -n default get configmap global -o jsonpath="{.data.environment}")

                  if [ "$ENVIRONMENT" = "vhdcprod" ]; then
                    ENVIRONMENT_TYPE_CODE="production"
                  elif [ "$ENVIRONMENT" = "va-testing" ]; then
                    ENVIRONMENT_TYPE_CODE="testing"
                  else
                    ENVIRONMENT_TYPE_CODE="$ENVIRONMENT"
                  fi

                  if [ -z "$NODEPOOL_TEMPLATE" ]; then
                    NODEPOOL_TEMPLATE="/manifests/provisioner.yaml"
                  fi

                  if [ -z "$NODECLASS_TEMPLATE" ]; then
                    NODECLASS_TEMPLATE="/manifests/nodeclass.yaml"
                  fi

                  WORKFLOWS=$(kubectl get workflows -n argo -o=jsonpath='{range .items[*]}{.metadata.name}{" "}{.metadata.labels.gen3username}{" "}{.metadata.labels.gen3teamproject}{"\n"}')

                  WORKFLOW_ARRAY=()

                  while IFS= read -r line; do
                    WORKFLOW_ARRAY+=("$line")
                  done <<< "$WORKFLOWS"

                  echo $WORKFLOWS

                  for workflow in "${WORKFLOW_ARRAY[@]}"
                  do
                    workflow_name=$(echo "$workflow" | awk '{print $1}')
                    workflow_user=$(echo "$workflow" | awk '{print $2}')
                    workflow_team=$(echo "$workflow" | awk '{print $3}')

                    if [ ! -z "$workflow_name" ]; then
                      if ! kubectl get ec2nodeclass workflow-$workflow_name >/dev/null 2>&1; then
                        echo "No awsnodetemplate found for ${workflow_name}, creating one"
                        sed -e "s/ENVIRONMENT_TYPE_CODE/$ENVIRONMENT_TYPE_CODE/" -e "s/WORKFLOW_NAME/$workflow_name/" -e "s/GEN3_TEAMNAME/$workflow_team/" -e "s/GEN3_USERNAME/$workflow_user/" -e "s/ENVIRONMENT/$ENVIRONMENT/" "$NODECLASS_TEMPLATE" | kubectl apply -f -
                      fi

                      if ! kubectl get nodepool workflow-$workflow_name >/dev/null 2>&1; then
                        echo "No provisioner found for ${workflow_name}, creating one"
                        sed -e "s/ENVIRONMENT_TYPE_CODE/$ENVIRONMENT_TYPE_CODE/" -e "s/WORKFLOW_NAME/$workflow_name/" -e "s/GEN3_TEAMNAME/$workflow_team/" -e "s/GEN3_USERNAME/$workflow_user/" -e "s/ENVIRONMENT/$ENVIRONMENT/" "$NODEPOOL_TEMPLATE" | kubectl apply -f -

                      fi
                    fi
                  done
          restartPolicy: OnFailure
