
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wts-deployment
  annotations:
    gen3.io/network-ingress: "mariner"
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: wts
      release: production
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: wts
        release: production
        public: "yes"
        netnolimit: "yes"
        userhelper: "yes"
        GEN3_DATE_LABEL
        GEN3_WTS_VERSION
        GEN3_ENV_LABEL
        GEN3_HOSTNAME_LABEL
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 25
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - wts
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - spot
          - weight: 99
            preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                - SPOT
      terminationGracePeriodSeconds: 10
      volumes:
        - name: wts-secret
          secret:
            secretName: "wts-g3auto"
      serviceAccountName: workspace-token-service
      containers:
      - name: wts
        GEN3_WTS_IMAGE
        ports:
        - containerPort: 80
        env:
        - name: POSTGRES_CREDS_FILE
          value: "/var/www/wts/dbcreds.json"
        - name: SECRET_CONFIG
          value: "/var/www/wts/appcreds.json"
        - name: AUTH_PLUGINS
          value: k8s
        - name: GEN3_UWSGI_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: manifest-global
              key: uwsgi-timeout
              optional: true
        volumeMounts:
        - name: "wts-secret"
          readOnly: true
          mountPath: "/var/www/wts/dbcreds.json"
          subPath: dbcreds.json
        - name: "wts-secret"
          readOnly: true
          mountPath: "/var/www/wts/appcreds.json"
          subPath: appcreds.json
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /_status
            port: 80
          failureThreshold: 10
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /_status
            port: 80
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            memory: 512Mi
      initContainers:
        - name: wts-db-migrate
          GEN3_WTS_IMAGE
          imagePullPolicy: Always
          volumeMounts:
          - name: "wts-secret"
            readOnly: true
            mountPath: "/var/www/wts/dbcreds.json"
            subPath: dbcreds.json
          - name: "wts-secret"
            readOnly: true
            mountPath: "/var/www/wts/appcreds.json"
            subPath: appcreds.json
          env:
          - name: POSTGRES_CREDS_FILE
            value: "/var/www/wts/dbcreds.json"
          - name: SECRET_CONFIG
            value: "/var/www/wts/appcreds.json"
          resources:
            limits:
              cpu: 0.8
              memory: 512Mi
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              if hash alembic 2>/dev/null || poetry run alembic --version >/dev/null 2>&1; then
                echo "Running DB migration"
                cd /wts
                # Managing virtual environments via poetry instead of python since the AL base image update, but retaining backwards compatibility
                poetry run alembic upgrade head || alembic upgrade head
              else
                # WTS < 0.3.0 does not have the DB migration setup
                echo "Alembic not installed - not running DB migration"
              fi
