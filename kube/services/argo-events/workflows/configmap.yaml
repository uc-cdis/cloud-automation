apiVersion: v1
kind: ConfigMap
metadata:
  name: karpenter-templates
  namespace: argo-events
data:
  provisioner.yaml: |
    apiVersion: karpenter.sh/v1alpha5
    kind: Provisioner
    metadata:
      name: workflow-WORKFLOW_NAME
    spec:
      requirements:
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64
        - key: node.kubernetes.io/instance-type
          operator: In
          values:
          - c6a.large
          - c6a.xlarge
          - c6a.2xlarge
          - c6a.4xlarge
          - c6a.8xlarge
          - c6a.12xlarge
          - c6i.large
          - c6i.xlarge
          - c6i.2xlarge
          - c6i.4xlarge
          - c6i.8xlarge
          - c6i.12xlarge
          - m6a.2xlarge
          - m6a.4xlarge
          - m6a.8xlarge
          - m6a.12xlarge
          - m6a.16xlarge
          - m6i.2xlarge
          - m6i.4xlarge
          - m6i.8xlarge
          - m6i.12xlarge
          - m6i.16xlarge
      taints:
        - key: role
          value: WORKFLOW_NAME
          effect: NoSchedule
      labels:
        role: WORKFLOW_NAME
      limits:
        resources:
          cpu: 2000
      providerRef:
        name: workflow-WORKFLOW_NAME
      # Kill nodes after 30 days to ensure they stay up to date
      ttlSecondsUntilExpired: 2592000
      ttlSecondsAfterEmpty: 10

  nodetemplate.yaml: |
    apiVersion: karpenter.k8s.aws/v1alpha1
    kind: AWSNodeTemplate
    metadata:
      name: workflow-WORKFLOW_NAME
    spec:
      subnetSelector:
        karpenter.sh/discovery: ENVIRONMENT
      securityGroupSelector:
        karpenter.sh/discovery: ENVIRONMENT-workflow
      tags:
        Environment: ENVIRONMENT
        Name: eks-ENVIRONMENT-workflow-karpenter
        karpenter.sh/discovery: ENVIRONMENT
        workflowname: WORKFLOW_NAME
        gen3username: GEN3_USERNAME
        gen3service: argo-workflows
        purpose: workflow
      metadataOptions:
        httpEndpoint: enabled
        httpProtocolIPv6: disabled
        httpPutResponseHopLimit: 2
        httpTokens: optional
      userData: |
        MIME-Version: 1.0
        Content-Type: multipart/mixed; boundary="BOUNDARY"

        --BOUNDARY
        Content-Type: text/x-shellscript; charset="us-ascii"

        #!/bin/bash -x
        instanceId=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceId)
        curl https://raw.githubusercontent.com/uc-cdis/cloud-automation/master/files/authorized_keys/ops_team >> /home/ec2-user/.ssh/authorized_keys

        echo "$(jq '.registryPullQPS=0' /etc/kubernetes/kubelet/kubelet-config.json)" > /etc/kubernetes/kubelet/kubelet-config.json

        sysctl -w fs.inotify.max_user_watches=12000

        sudo yum update -y
        sudo yum install -y dracut-fips openssl >> /opt/fips-install.log
        sudo  dracut -f
        # configure grub
        sudo /sbin/grubby --update-kernel=ALL --args="fips=1"

        --BOUNDARY
        Content-Type: text/cloud-config; charset="us-ascii"

        power_state:
          delay: now
          mode: reboot
          message: Powering off
          timeout: 2
          condition: true

        --BOUNDARY--
      blockDeviceMappings:
        - deviceName: /dev/xvda
          ebs:
            volumeSize: 100Gi
            volumeType: gp2
            encrypted: true
            deleteOnTermination: true
