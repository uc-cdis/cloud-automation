apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jenkins-deployment
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: jenkins
  revisionHistoryLimit: 2
  strategy:
    #
    # rolling update does not work, since
    # persistent volume claim cannot be shared
    #
    type: Recreate
  template:
    metadata:
      labels:
        app: jenkins
        # for network policy
        netnolimit: "yes"
        GEN3_DATE_LABEL
    spec:
      serviceAccountName: jenkins-service
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      #
      # See for details on running docker in a pod:
      #   https://estl.tech/accessing-docker-from-a-kubernetes-pod-68996709c04b
      #
      - name: jenkins
        GEN3_JENKINS_IMAGE
        ports:
        - containerPort: 8080
        env:
          - name: HOSTNAME
            valueFrom:
              configMapKeyRef:
                name: global
                key: hostname
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: JAVA_OPTS
            value: "-Xmx3072m"
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: jenkins-secret
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: jenkins-secret
                key: aws_secret_access_key
          - name: JENKINS_S3_PATH
            # Just hard code for now 
            # Bucket in cdistest account used for backups
            value: "s3://cdis-terraform-state/JenkinsBackup"
          - name: GOOGLE_EMAIL_AUX1
            valueFrom:
              secretKeyRef:
                name: google-acct1
                key: email
          - name: GOOGLE_PASSWORD_AUX1
            valueFrom:
              secretKeyRef:
                name: google-acct1
                key: password
          - name: GOOGLE_EMAIL_AUX2
            valueFrom:
              secretKeyRef:
                name: google-acct2
                key: email
          - name: GOOGLE_PASSWORD_AUX2
            valueFrom:
              secretKeyRef:
                name: google-acct2
                key: password
          - name: GOOGLE_APP_CREDS_JSON
            valueFrom:
              secretKeyRef:
                name: jenkins-g3auto
                key: google_app_creds.json
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
        resources:
          limits:
            cpu: 0.9
            memory: 8192Mi
        imagePullPolicy: Always
        volumeMounts:
        - name: datadir
          mountPath: /var/jenkins_home
        - name: "cert-volume"
          readOnly: true
          mountPath: "/mnt/ssl/service.crt"
          subPath: "service.crt"
        - name: "cert-volume"
          readOnly: true
          mountPath: "/mnt/ssl/service.key"
          subPath: "service.key"
        - name: "ca-volume"
          readOnly: true
          mountPath: "/usr/local/share/ca-certificates/cdis/cdis-ca.crt"
          subPath: "ca.pem"
        - name: dockersock
          mountPath: "/var/run/docker.sock"
      - name: selenium
        image: selenium/standalone-chrome:3.14
        ports:
        - containerPort: 4444
        readinessProbe:
          httpGet:
            path: /wd/hub/sessions
            port: 4444
        readinessProbe:
          httpGet:
            path: /wd/hub/sessions
            port: 4444
        imagePullPolicy: Always
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir-jenkins
      - name: cert-volume
        secret:
          secretName: "cert-jenkins-service"
      - name: ca-volume
        secret:
          secretName: "service-ca"
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
