apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: fence-deployment
spec:
  selector:
    # Only select pods based on the 'app' label
    matchLabels:
      app: fence
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: fence
        release: production
        # for network policy selectors
        authprovider: "yes"
        # uses explicit proxy and AWS APIs
        netnolimit: "yes"
        public: "yes"
        date: "1522344094"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fence
              topologyKey: "kubernetes.io/hostname"
      automountServiceAccountToken: false
      volumes:
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
        - name: fence-jwt-keys
          secret:
            secretName: "fence-jwt-keys"
        - name: fence-yaml
          configMap:
            name: fence
        - name: cert-volume
          secret:
            secretName: "cert-fence-service"
        - name: ca-volume
          secret:
            secretName: "service-ca"
      containers:
      - name: fence
        image: quay.io/cdis/fence:2.0.2
        env:
          - name: PYTHONPATH
            value: /var/www/fence
          - name: GEN3_DEBUG
            value: "False"
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /_status
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /_status
            port: 80
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
          - name: "config-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence-config.yaml"
            subPath: fence-config.yaml
          - name: "creds-volume"
            readOnly: true
            mountPath: "/var/www/fence/creds.json"
            subPath: creds.json
          - name: "config-helper"
            readOnly: true
            mountPath: "/var/www/fence/config_helper.py"
            subPath: config_helper.py
          - name: "fence-yaml"
            mountPath: "/var/www/fence/user.yaml"
            subPath: user.yaml
          - name: "cert-volume"
            readOnly: true
            mountPath: "/mnt/ssl/service.crt"
            subPath: "service.crt"
          - name: "cert-volume"
            readOnly: true
            mountPath: "/mnt/ssl/service.key"
            subPath: "service.key"
          - name: "ca-volume"
            # See https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line
            readOnly: true
            mountPath: "/usr/local/share/ca-certificates/cdis/cdis-ca.crt"
            subPath: "ca.pem"
          - name: "fence-jwt-keys"
            readOnly: true
            mountPath: "/fence/jwt-keys.tar"
            subPath: "jwt-keys.tar"
        resources:
            limits:
              cpu: 0.3
              memory: 1200Mi
      initContainers:
      - name: fence-init
        image: quay.io/cdis/fence:2.0.2
        imagePullPolicy: Always
        env:
          - name: PYTHONPATH
            value: /var/www/fence
        volumeMounts:
          - name: "config-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence-config.yaml"
            subPath: fence-config.yaml
          - name: "fence-google-app-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
            subPath: fence_google_app_creds_secret.json
          - name: "fence-google-storage-creds-secret-volume"
            readOnly: true
            mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
            subPath: fence_google_storage_creds_secret.json
          - name: "fence-yaml"
            mountPath: "/var/www/fence/user.yaml"
            subPath: user.yaml
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            if fence-create migrate --help > /dev/null 2>&1; then
              echo "Running db migration: fence-create migrate"
              fence-create migrate
            else
              echo "Db migration not available in this version of fence"
            fi
